# -*- coding: utf-8 -*-
"""Training Image Script Drive Valent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14Ez2y2uwrFhEVdZVlQ3j8I4Iyy_rxxRH

# **Dokumentasi**

**Deskripsi:**

Notebook ini berisikan sistem deteksi makanan berbasis computer vision dengan model YOLOv11n, yang dikombinasikan dengan sistem estimasi kalori otomatis berdasarkan jenis makanan yang terdeteksi pada gambar input. Proyek ini dibungkus dalam bentuk package Python modular.

**Dataset:**

Dataset yang digunakan merupakan hasil penggabungan dan modifikasi dari dataset Roboflow, dengan kategori makanan khas Asia Tenggara seperti *rice, sambal, rendang, tempe goreng, mie ayam, chicken nugget, dll*. Dataset ini:
- Mengandung anotasi bounding box untuk masing-masing jenis makanan.
- Terdiri dari data gambar makanan indonesai dengan total 18 jenis makanan, terdapat gambar dengan banyak jenis makanan serta per individu.
- Dataset di kumpulkan, dianotasi, augmentasi melalui Roboflow.
- Untuk references kalori per makanannya dilakukan manual dengan membuat fungsi `model/yolo_food.pt`

**Struktur Dataset:**
- Format: YOLOv8 format (`images/`, `labels/`, `data.yaml`)
- Split: train / valid / test
- Jumlah kelas: 18 kelas makanan
- Anotasi: Bounding box (.txt) dan label numerik terhubung ke nama kelas

**Proses Pelatihan Model:**

Model deteksi objek dilatih menggunakan arsitektur **YOLOv11** dari Ultralytics.

**Detail pelatihan:**
- Arsitektur: YOLOv11n (versi ringan untuk efisiensi)
- Pretrained weights: COCO
- Input size: 640×640
- Epoch: 50
- Optimizer: SGD/Adam default Ultralytics
- Evaluasi: mAP@0.5 dan mAP@0.5:0.95
- Hasil pelatihan dicatat dalam `runs/detect/train/results.csv`

**Fitur Utama:**
- Deteksi jenis makanan pada gambar (multi-label object detection).
- Estimasi kalori otomatis berdasarkan referensi kalori rata-rata per makanan.
- Visualisasi bounding box hasil deteksi.
- Didesain dalam package Python `food_calorie_estimator` agar dapat digunakan secara modular atau API-ready.

**Struktur Package:**
- `detector.py` → Load dan jalankan model YOLOv8 untuk deteksi.
- `calorie_estimator.py` → Hitung total kalori berdasarkan hasil deteksi.
- `kalori_reference.py` → Kamus kalori per jenis makanan (per porsi).
- `model/yolo_food.pt` → Model YOLO hasil pelatihan pada dataset makanan.
- `example_usage.py` → Contoh pemakaian pipeline deteksi & estimasi kalori.

**Catatan:**
- Dataset masih terdiri dari 18 jenis makanan masih dapat di kembangkan dengan variasi makanan yang lebih banyak
- Estimasi kalori bersifat referensial, dapat dikembangkan lebih lanjut dengan bounding box area atau volume estimation.

# **Fine Tuning training Food Detection from Roboflow**
"""

!nvidia-smi

# Commented out IPython magic to ensure Python compatibility.
# %pip install "ultralytics<=8.3.40" supervision roboflow

# Commented out IPython magic to ensure Python compatibility.
!mkdir {HOME}/datasets
# %cd {HOME}/datasets

from ultralytics import YOLO
from PIL import Image
import requests
import os
from google.colab import userdata
from roboflow import Roboflow


ROBOFLOW_API_KEY = userdata.get('ROBOFLOW_API_KEY')
rf = Roboflow(api_key=ROBOFLOW_API_KEY)

workspace = rf.workspace("liangdianzhong")
project = rf.workspace("valent-1u8hq").project("makanan-humic")
version = project.version(1)
dataset = version.download("yolov11")

import os
import glob
from collections import Counter
import matplotlib.pyplot as plt
import pandas as pd

# Ganti path ke dataset kamu
DATASET_PATH = "/content/Makanan-humic-1"
splits = ['train', 'valid', 'test']

# 1. Hitung jumlah gambar & label per split
for split in splits:
    image_count = len(glob.glob(f"{DATASET_PATH}/{split}/images/*.jpg")) + \
                  len(glob.glob(f"{DATASET_PATH}/{split}/images/*.png"))
    label_count = len(glob.glob(f"{DATASET_PATH}/{split}/labels/*.txt"))
    print(f"{split.upper()} → Gambar: {image_count}, Label: {label_count}")

# 2. Hitung distribusi kelas dari semua label
class_counts = Counter()

for split in splits:
    label_files = glob.glob(f"{DATASET_PATH}/{split}/labels/*.txt")
    for label_path in label_files:
        with open(label_path, 'r') as f:
            for line in f:
                class_id = line.strip().split()[0]
                class_counts[class_id] += 1

# 3. Baca nama kelas dari file data.yaml
import yaml
with open(os.path.join(DATASET_PATH, "data.yaml"), "r") as f:
    data_yaml = yaml.safe_load(f)
    class_names = data_yaml['names']

# 4. Buat DataFrame ringkasan
df_counts = pd.DataFrame({
    "Class ID": list(class_counts.keys()),
    "Class Name": [class_names[int(k)] for k in class_counts.keys()],
    "Jumlah Bounding Box": list(class_counts.values())
})

df_counts = df_counts.sort_values(by="Jumlah Bounding Box", ascending=False)
display(df_counts)

# 5. Visualisasi Distribusi Kelas
plt.figure(figsize=(10, 6))
plt.bar(df_counts["Class Name"], df_counts["Jumlah Bounding Box"])
plt.xticks(rotation=45)
plt.title("Distribusi Bounding Box per Kelas")
plt.xlabel("Kelas")
plt.ylabel("Jumlah Bounding Box")
plt.tight_layout()
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}

!yolo task=detect mode=train model=yolo11n.pt data={dataset.location}/data.yaml epochs=50 imgsz=640 plots=True

!apt install zip
!zip -r hasil_training.zip runs/detect/train

!ls runs/detect/train/

import matplotlib.pyplot as plt

results_path = "/content/runs/detect/train/results.csv"
df = pd.read_csv(results_path)

print("Kolom hasil training:")
print(df.columns)

df_sorted = df.sort_values(by='metrics/mAP50(B)', ascending=False)

# Ambil 3 epoch terbaik aj
top3 = df_sorted.head(3).copy()
top3['epoch'] = top3.index

plt.figure(figsize=(6,4))
plt.bar(top3['epoch'].astype(str), top3['metrics/mAP50(B)'])
plt.title("Top 3 Epoch mAP@0.5 Terbaik")
plt.xlabel("Epoch")
plt.ylabel("mAP@0.5")
plt.grid(True)
plt.show()

top3

from IPython.display import Image as IPyImage

IPyImage(filename=f'runs/detect/train/confusion_matrix.png', width=600)

IPyImage(filename=f'runs/detect/train/results.png', width=600)

IPyImage(filename=f'runs/detect/train/val_batch0_pred.jpg', width=600)

model = YOLO("/content/runs/detect/train/weights/best.pt")
results = model("/content/IMG_E9080.JPG", save=True, conf=0.5)
results[0].show()

results = model("/content/IMG_E4683.JPG", save=True, conf=0.5)
results[0].show()

results = model("/content/nasi_lemak_test_81_png (1).png", save=True, conf=0.5)
results[0].show()

results = model("/content/nasi_lemak_test_53_png.png", save=True, conf=0.5)
results[0].show()

from ultralytics import YOLO
import matplotlib.pyplot as plt

# Load model YOLO
model = YOLO("/content/runs/detect/train/weights/best.pt")

# Daftar path gambar
image_paths = [
    "/content/IMG_E9080.JPG",
    "/content/IMG_E4683.JPG",
    "/content/nasi_lemak_test_81_png (1).png",
    "/content/nasi_lemak_test_53_png.png"
]

# Prediksi semua gambar sekaligus
results_list = model(image_paths, conf=0.5)

# Tampilkan hasilnya
for i, result in enumerate(results_list):
    img = result.plot()  # hasil visualisasi bounding box
    plt.figure(figsize=(6, 6))
    plt.imshow(img)
    plt.title(f"Gambar {i+1}")
    plt.axis('off')
    plt.show()

"""# **Making The Package**"""

import os

# Buat folder utama package
os.makedirs("food_calorie_estimator", exist_ok=True)
os.makedirs("food_calorie_estimator/model", exist_ok=True)

# Inisialisasi __init__.py agar dikenali sebagai package
with open("food_calorie_estimator/__init__.py", "w") as f:
    f.write("# Food Calorie Estimator Package")

kalori_reference_code = """
kalori_dict = {
    'Anchovies': 60,
    'Boiled-Egg': 78,
    'Cah Kangkung': 40,
    'Chicken Nugget': 45,
    'Chicken Rendang': 250,
    'Crispy Fried Chicken': 280,
    'Cucumber': 8,
    'Fried-Chicken': 250,
    'Fried-Egg': 90,
    'Mie Ayam': 350,
    'Mie Bakso': 400,
    'Peanuts': 68,
    'Rendang': 300,
    'Rice': 200,
    'Sambal': 30,
    'Telur Balado': 120,
    'Tempe Goreng': 120,
    'curry': 180
}
"""

with open("food_calorie_estimator/kalori_reference.py", "w") as f:
    f.write(kalori_reference_code)

calorie_estimator_code = """
def hitung_total_kalori(detected_items, kalori_dict):
    rincian = {}
    total_kalori = 0
    for item in detected_items:
        kalori = kalori_dict.get(item, 0)
        rincian[item] = rincian.get(item, 0) + kalori
        total_kalori += kalori
    return total_kalori, rincian
"""

with open("food_calorie_estimator/calorie_estimator.py", "w") as f:
    f.write(calorie_estimator_code)

detector_code = """
from ultralytics import YOLO

class FoodDetector:
    def __init__(self, model_path="food_calorie_estimator/model/yolo_food.pt"):
        self.model = YOLO(model_path)

    def detect_food(self, image_path):
        results = self.model.predict(image_path, conf=0.3)
        classes = []
        for r in results:
            classes.extend([r.names[int(cls)] for cls in r.boxes.cls])
        return classes
"""

with open("food_calorie_estimator/detector.py", "w") as f:
    f.write(detector_code)

example_code = """
from food_calorie_estimator.detector import FoodDetector
from food_calorie_estimator.calorie_estimator import hitung_total_kalori
from food_calorie_estimator.kalori_reference import kalori_dict

# Load model (pastikan sudah upload file yolo_food.pt ke folder model/)
detector = FoodDetector("food_calorie_estimator/model/yolo_food.pt")

# Ganti dengan gambar kamu sendiri (upload dulu ke Colab)
image_path = "sample.jpg"

# Deteksi dan estimasi kalori
detected = detector.detect_food(image_path)
total_kalori, rincian = hitung_total_kalori(detected, kalori_dict)

print("Detected:", detected)
print("Total Kalori:", total_kalori, "kcal")
print("Rincian:")
for makanan, kal in rincian.items():
    print(f"  - {makanan}: {kal} kcal")
"""

with open("example_usage.py", "w") as f:
    f.write(example_code)

from google.colab import files
# uploaded = files.upload()

# Pindahkan file model ke folder package
# !mv yolo_food.pt food_calorie_estimator/model/

!cp /content/runs/detect/train/weights/best.pt food_calorie_estimator/model/yolo_food.pt

!zip -r food_calorie_estimator.zip food_calorie_estimator

"""# **Example package usage**"""

# 1. Import modul dari package
from food_calorie_estimator.detector import FoodDetector
from food_calorie_estimator.calorie_estimator import hitung_total_kalori
from food_calorie_estimator.kalori_reference import kalori_dict

# 2. Inisialisasi detektor dengan model di dalam package
detector = FoodDetector(model_path="food_calorie_estimator/model/yolo_food.pt")

# 3. Gambar input (misalnya dari user upload atau file lokal)
image_path = "/content/nasi_lemak_test_53_png.png"

# 4. Lakukan deteksi makanan
detected_items = detector.detect_food(image_path)

# 5. Hitung total kalori
total_kalori, rincian = hitung_total_kalori(detected_items, kalori_dict)

# 6. Tampilkan hasil
print("Total Kalori:", total_kalori, "kcal")